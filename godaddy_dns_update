#!/bin/bash

PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
readonly domain="${1}"
readonly subdomain="${2}"
readonly api_key="${3}"
readonly api_secret="${4}"
readonly dns_check="${5}"
readonly puid="${6}"
readonly pgid="${7}"
readonly tz="${8}"
if [[ "${tz}" == 'NULL' ]]; then
  printf '%s\n' "TZ variable not set, defaulting to UTC"
  cp /usr/share/zoneinfo/UTC /etc/localtime
else
  if ! ls "/usr/share/zoneinfo/${tz}" >/dev/null 2>&1; then
    printf '%s\n' "Invalid TZ variable set, defaulting to UTC"
    cp /usr/share/zoneinfo/UTC /etc/localtime
  else
    printf '%s\n' "Setting timezone to ${tz}"
    cp /usr/share/zoneinfo/${tz} /etc/localtime
  fi
fi

# Logger function
logger(){
  printf '%s\n' "[$(date +%D" "%H:%M" "%Z)]: ${1}"|tee -a ${logdest}
}

# Setup logfile
setup_logger(){
  if [[ "${subdomain}" == '*' ]] || [[ "${subdomain}" == '@' ]]; then
    readonly logdest=/tmp/godaddy_dns_update-domain.log
  else
    readonly logdest=/tmp/godaddy_dns_update_subdomain.log
  fi
  touch "${logdest}" && chown ${puid}:${pgid} "${logdest}"
  chmod a+r "${logdest}"
}

# Check if domain variable is set and exit if not
validate_domain(){
  if [[ "${domain}" == 'NULL' ]]; then
    logger "Domain not set, exiting container"
    sleep 30
    exit 1
  fi
}

# Check if api_key variable is set and exit if not
validate_api_key(){
  if [[ "${api_key}" == 'NULL' ]]; then
    logger "Api_key not set, exiting container"
    sleep 30
    exit 1
  fi
}

# Check if api_secret variable is set and exit if not
validate_api_secret(){
  if [[ "${api_secret}" == 'NULL' ]]; then
    logger "api_secret not set, either add variable to docker or append to \"api_key\" with \":\""
  fi
}

validate_subdomain(){
  if [[ "${subdomain}" == '*' ]]; then
    logger "Error: subdomain should be omitted for wildcard updates.  Point subdomains to '@' in godaddy DNS and update domain with this container"
    sleep 30
    exit 1
  fi
}

monitor_and_update_domain(){
  if [[ "${subdomain}" == '@' ]]; then
    local -ra domain_array+=("${domain}")
  else
    IFS='|' read -ra subdomain_array <<< "${subdomain}"
    for sub_domain in ${subdomain_array[@]}; do
      domain_array+=("${sub_domain}")
    done
  fi
  if [[ "${api_secret}" == 'NULL' ]]; then
    local -r api_auth_string="${api_key}"
  else
    local -r api_auth_string="${api_key}:${api_secret}"
  fi
  while :; do
    for domain_to_update in "${domain_array[@]}"; do
      domain_dns_ip=$(dig +short "${domain_to_update}")
      if ! external_ip=$(curl -s https://ifconfig.me); then
        logger "Unable to get external ip address"
        exit 1
      fi
      if [[ "${subdomain}" == '@' ]]; then
        domain_name="${domain}"
      else
        domain_name="${domain_to_update}.${domain}"
      fi
      if [[ "${domain_dns_ip}" != "${external_ip}" ]]; then
        if [[ "${subdomain}" == '@' ]]; then
          domain_to_update='@'
        fi
        domain_ip="$(curl -s -X GET -H "Authorization: sso-key ${api_auth_string}" "https://api.godaddy.com/v1/domains/${domain}/records/A/${domain_to_update}"|awk -F'"' '{print $4}')"
        if [[ "${domain_ip}" != "${external_ip}" ]]; then
          update_status=$(curl -o /dev/null -w "%{http_code}\n" -s -X PUT "https://api.godaddy.com/v1/domains/${domain}/records/A/${domain_to_update}" -H "Authorization: sso-key ${api_auth_string}" -H "Content-Type: application/json" -d "[{\"data\": \"${external_ip}\"}]")
          if [[ ${update_status} -eq 200 ]]; then
            logger "Changed IP on ${domain_name} from ${domain_ip} to ${external_ip}"
          else
            logger "GoDaddy API returned ${update_status} status for ${domain_name}, update FAILED"
          fi
        else
          logger "External DNS for ${domain_name} resolves to ${external_ip}, no update needed"
        fi
      else
        logger "External DNS for ${domain_name} resolves to ${external_ip}, no update needed"
      fi
      sleep 1
    done
    printf '%s\n' "Next check at $(date +%D" "%H:%M" "%Z -d "@$(( $(date +%s) + ${dns_check}))")"
    sleep ${dns_check}
  done
}

main(){
  setup_logger
  validate_domain
  validate_api_key
  validate_subdomain
  monitor_and_update_domain
}

main
